---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: slp-simucase
  labels:
    name: slp-simucase

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: slp-config
  namespace: slp-simucase
data:
  GRADIO_SERVER_NAME: "0.0.0.0"
  GRADIO_SERVER_PORT: "7860"
  LOG_LEVEL: "info"
  BACKEND_API_URL: "http://fastapi-backend:8000"
  ALLOWED_ORIGINS: "*"
  ALLOWED_HOSTS: "localhost,127.0.0.1"

---
# Secret for sensitive data (use sealed-secrets or external secrets in production)
apiVersion: v1
kind: Secret
metadata:
  name: slp-secrets
  namespace: slp-simucase
type: Opaque
stringData:
  # Auth0 Configuration
  AUTH0_DOMAIN: "your-domain.auth0.com"
  AUTH0_CLIENT_ID: "your-client-id"
  AUTH0_CLIENT_SECRET: "your-client-secret"
  AUTH0_API_AUDIENCE: "https://your-api-audience"
  AUTH0_ISSUER_URL: "https://your-domain.auth0.com/"
  OAUTH2_REDIRECT_URL: "https://your-domain.com/oauth2/callback"

  # Database
  DATABASE_URL: "postgresql+asyncpg://postgres:password@postgres:5432/slp_rbac"
  POSTGRES_PASSWORD: "secure-password-here"

  # Redis
  REDIS_URL: "redis://:redis_password@redis:6379/0"
  REDIS_PASSWORD: "redis_password"

  # API Keys
  OPENAI_API_KEY: "your-openai-key"
  GOOGLE_API_KEY: "your-google-key"
  ANTHROPIC_API_KEY: "your-anthropic-key"

  # OAuth2 Proxy Cookie Secret (generate with: python -c 'import os,base64; print(base64.b64encode(os.urandom(32)).decode())')
  OAUTH2_PROXY_COOKIE_SECRET: "your-32-byte-base64-encoded-secret"

---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: slp-simucase
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: slp_rbac
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: slp-secrets
              key: POSTGRES_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: init-scripts
        configMap:
          name: postgres-init
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: slp-simucase
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  clusterIP: None

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: slp-simucase
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        - --appendonly
        - "yes"
        ports:
        - containerPort: 6379
          name: redis
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: slp-secrets
              key: REDIS_PASSWORD
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-storage
        emptyDir: {}

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: slp-simucase
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379

---
# FastAPI Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fastapi-backend
  namespace: slp-simucase
spec:
  replicas: 3
  selector:
    matchLabels:
      app: fastapi-backend
  template:
    metadata:
      labels:
        app: fastapi-backend
        version: v1
    spec:
      containers:
      - name: fastapi
        image: your-registry/slp-fastapi:latest
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: slp-secrets
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: slp-secrets
              key: REDIS_URL
        - name: AUTH0_DOMAIN
          valueFrom:
            secretKeyRef:
              name: slp-secrets
              key: AUTH0_DOMAIN
        - name: AUTH0_API_AUDIENCE
          valueFrom:
            secretKeyRef:
              name: slp-secrets
              key: AUTH0_API_AUDIENCE
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: slp-config
              key: LOG_LEVEL
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
        volumeMounts:
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: logs
        emptyDir: {}

---
# FastAPI Backend Service
apiVersion: v1
kind: Service
metadata:
  name: fastapi-backend
  namespace: slp-simucase
spec:
  selector:
    app: fastapi-backend
  ports:
  - port: 8000
    targetPort: 8000
    name: http

---
# Gradio App Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gradio-app
  namespace: slp-simucase
spec:
  replicas: 2
  selector:
    matchLabels:
      app: gradio-app
  template:
    metadata:
      labels:
        app: gradio-app
        version: v1
    spec:
      containers:
      - name: gradio
        image: your-registry/slp-gradio:latest
        ports:
        - containerPort: 7860
          name: http
        env:
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: slp-secrets
              key: OPENAI_API_KEY
        - name: GOOGLE_API_KEY
          valueFrom:
            secretKeyRef:
              name: slp-secrets
              key: GOOGLE_API_KEY
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: slp-secrets
              key: ANTHROPIC_API_KEY
        - name: BACKEND_API_URL
          valueFrom:
            configMapKeyRef:
              name: slp-config
              key: BACKEND_API_URL
        - name: GRADIO_SERVER_NAME
          valueFrom:
            configMapKeyRef:
              name: slp-config
              key: GRADIO_SERVER_NAME
        - name: GRADIO_SERVER_PORT
          valueFrom:
            configMapKeyRef:
              name: slp-config
              key: GRADIO_SERVER_PORT
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /
            port: 7860
          initialDelaySeconds: 60
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 7860
          initialDelaySeconds: 30
          periodSeconds: 5
        volumeMounts:
        - name: data
          mountPath: /app/data
        - name: generated-files
          mountPath: /app/generated_case_files
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: slp-data-pvc
      - name: generated-files
        persistentVolumeClaim:
          claimName: slp-generated-pvc

---
# Gradio App Service
apiVersion: v1
kind: Service
metadata:
  name: gradio-app
  namespace: slp-simucase
spec:
  selector:
    app: gradio-app
  ports:
  - port: 7860
    targetPort: 7860
    name: http

---
# OAuth2 Proxy Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oauth2-proxy
  namespace: slp-simucase
spec:
  replicas: 2
  selector:
    matchLabels:
      app: oauth2-proxy
  template:
    metadata:
      labels:
        app: oauth2-proxy
    spec:
      containers:
      - name: oauth2-proxy
        image: quay.io/oauth2-proxy/oauth2-proxy:v7.5.1
        args:
        - --provider=oidc
        - --provider-display-name=Auth0
        - --oidc-issuer-url=$(AUTH0_ISSUER_URL)
        - --client-id=$(AUTH0_CLIENT_ID)
        - --client-secret=$(AUTH0_CLIENT_SECRET)
        - --cookie-secret=$(OAUTH2_PROXY_COOKIE_SECRET)
        - --email-domain=*
        - --upstream=http://gradio-app:7860
        - --http-address=0.0.0.0:4180
        - --redirect-url=$(OAUTH2_REDIRECT_URL)
        - --cookie-secure=true
        - --cookie-httponly=true
        - --set-xauthrequest=true
        - --pass-access-token=true
        - --pass-authorization-header=true
        ports:
        - containerPort: 4180
          name: http
        env:
        - name: AUTH0_ISSUER_URL
          valueFrom:
            secretKeyRef:
              name: slp-secrets
              key: AUTH0_ISSUER_URL
        - name: AUTH0_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: slp-secrets
              key: AUTH0_CLIENT_ID
        - name: AUTH0_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: slp-secrets
              key: AUTH0_CLIENT_SECRET
        - name: OAUTH2_PROXY_COOKIE_SECRET
          valueFrom:
            secretKeyRef:
              name: slp-secrets
              key: OAUTH2_PROXY_COOKIE_SECRET
        - name: OAUTH2_REDIRECT_URL
          valueFrom:
            secretKeyRef:
              name: slp-secrets
              key: OAUTH2_REDIRECT_URL
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /ping
            port: 4180
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ping
            port: 4180
          initialDelaySeconds: 5
          periodSeconds: 5

---
# OAuth2 Proxy Service
apiVersion: v1
kind: Service
metadata:
  name: oauth2-proxy
  namespace: slp-simucase
spec:
  selector:
    app: oauth2-proxy
  ports:
  - port: 4180
    targetPort: 4180
    name: http

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: slp-ingress
  namespace: slp-simucase
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - your-domain.com
    secretName: slp-tls-cert
  rules:
  - host: your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: oauth2-proxy
            port:
              number: 4180
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: fastapi-backend
            port:
              number: 8000

---
# PersistentVolumeClaim for data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: slp-data-pvc
  namespace: slp-simucase
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 20Gi

---
# PersistentVolumeClaim for generated files
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: slp-generated-pvc
  namespace: slp-simucase
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
